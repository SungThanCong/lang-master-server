// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server.Data.EF;

#nullable disable

namespace server.Data.Migrations
{
    [DbContext(typeof(LangDbContext))]
    [Migration("20230706174318_updateName")]
    partial class updateName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            ConcurrencyStamp = "c4c8681a-ed77-47af-b780-e4303f560478",
                            Description = "Administrator role",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("0fcbb353-ae6b-4936-9fdd-950efeb452a6"),
                            ConcurrencyStamp = "5320d495-2cfc-479b-9419-5f43669cb9e8",
                            Description = "Lecturer role",
                            Name = "lecturer",
                            NormalizedName = "lecturer"
                        },
                        new
                        {
                            Id = new Guid("09480504-4c27-4af7-a492-adcdbbe6c097"),
                            ConcurrencyStamp = "78242784-7da4-4551-81b9-3701814f26dd",
                            Description = "Employee role",
                            Name = "employee",
                            NormalizedName = "employee"
                        });
                });

            modelBuilder.Entity("server.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 0,
                            Address = "Quang Nam",
                            ConcurrencyStamp = "4b00bfc7-b0c7-4f2d-8ae3-b773a31fbb3a",
                            DisplayName = "Luu Le Ba Chinh",
                            Dob = new DateTime(2000, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "chinh.admin@gmail.com",
                            EmailConfirmed = true,
                            Gender = 0,
                            IsActivated = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "chinh.admin@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEI594sOx6W/Ci88yINNMOaYqQh3VABHgxomlgs/N4JeVsLKvZP3KePlOP5Uy87VY3Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("server.Data.Entities.Attendance", b =>
                {
                    b.Property<Guid>("IdAttendance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdClassTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdStudent")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdAttendance");

                    b.HasIndex("IdClassTime");

                    b.HasIndex("IdStudent");

                    b.ToTable("Attendance", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.Bill", b =>
                {
                    b.Property<Guid>("IdBill")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 7, 0, 43, 18, 414, DateTimeKind.Local).AddTicks(8421));

                    b.Property<Guid>("IdEmployee")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalFee")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdBill");

                    b.HasIndex("IdEmployee");

                    b.HasIndex("IdStudent");

                    b.ToTable("Bill", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.BillInfo", b =>
                {
                    b.Property<Guid>("IdBill")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdClass")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdBill", "IdClass");

                    b.HasIndex("IdClass");

                    b.ToTable("BillInfo", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.Center", b =>
                {
                    b.Property<Guid>("IdCenter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CenterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCenter");

                    b.ToTable("Center", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.Class", b =>
                {
                    b.Property<Guid>("IdClass")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdCourse")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdClass");

                    b.HasIndex("IdCourse");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.ClassTime", b =>
                {
                    b.Property<Guid>("IdClassTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<Guid>("IdClass")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTimeFrame")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdClassTime");

                    b.HasIndex("IdClass");

                    b.HasIndex("IdTimeFrame");

                    b.ToTable("ClassTime", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.ColumnCourse", b =>
                {
                    b.Property<Guid>("IdCourse")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdColumn")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdCourse", "IdColumn");

                    b.HasIndex("IdColumn");

                    b.ToTable("ColumnCourse", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.ColumnTranscript", b =>
                {
                    b.Property<Guid>("IdColumn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Max")
                        .HasColumnType("int");

                    b.Property<int>("Min")
                        .HasColumnType("int");

                    b.HasKey("IdColumn");

                    b.ToTable("ColumnTranscript", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.ConfirmCodes", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("IdUser");

                    b.ToTable("ConfirmCode", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.Course", b =>
                {
                    b.Property<Guid>("IdCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fee")
                        .HasColumnType("int");

                    b.Property<Guid>("IdCourseType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdLevel")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Max")
                        .HasColumnType("int");

                    b.HasKey("IdCourse");

                    b.HasIndex("IdCourseType");

                    b.HasIndex("IdLevel");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.CourseType", b =>
                {
                    b.Property<Guid>("IdCourseType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdCourseType");

                    b.ToTable("CourseType", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.Employee", b =>
                {
                    b.Property<Guid>("IdEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("IdEmployee");

                    b.HasIndex("IdUser")
                        .IsUnique();

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.Exam", b =>
                {
                    b.Property<Guid>("IdExam")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdClass")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdColumn")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTestType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PostedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 7, 0, 43, 18, 423, DateTimeKind.Local).AddTicks(389));

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TestTime")
                        .HasColumnType("int");

                    b.HasKey("IdExam");

                    b.HasIndex("IdClass");

                    b.HasIndex("IdColumn");

                    b.HasIndex("IdTestType");

                    b.ToTable("Exam", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.Learning", b =>
                {
                    b.Property<Guid>("IdStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdClass")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdStudent", "IdClass");

                    b.HasIndex("IdClass");

                    b.ToTable("Learning", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.Lecturer", b =>
                {
                    b.Property<Guid>("IdLecturer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("IdLecturer");

                    b.HasIndex("IdUser")
                        .IsUnique();

                    b.ToTable("Lecturer", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.Level", b =>
                {
                    b.Property<Guid>("IdLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Point")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("IdLevel");

                    b.ToTable("Level", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.Noti_Account", b =>
                {
                    b.Property<Guid>("IdNotification")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdAccount")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdNotification", "IdAccount");

                    b.HasIndex("IdAccount");

                    b.ToTable("NotiAccount", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.Notification", b =>
                {
                    b.Property<Guid>("IdNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdNotification");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.Parameter", b =>
                {
                    b.Property<Guid>("IdParameter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("IdParameter");

                    b.ToTable("Parameter", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.RefreshTokens", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 7, 0, 43, 18, 429, DateTimeKind.Local).AddTicks(828));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 7, 0, 43, 18, 429, DateTimeKind.Local).AddTicks(977));

                    b.HasKey("Id");

                    b.HasIndex("IdUser")
                        .IsUnique();

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.Student", b =>
                {
                    b.Property<Guid>("IdStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("IdStudent");

                    b.HasIndex("IdUser")
                        .IsUnique();

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.Teaching", b =>
                {
                    b.Property<Guid>("IdTeaching")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdClass")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdLecturer")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdTeaching");

                    b.HasIndex("IdClass");

                    b.HasIndex("IdLecturer");

                    b.ToTable("Teaching", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.TestType", b =>
                {
                    b.Property<Guid>("IdTestType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("IdTestType");

                    b.ToTable("TestType", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.Testing", b =>
                {
                    b.Property<Guid>("IdStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdExam")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.HasKey("IdStudent", "IdExam");

                    b.HasIndex("IdExam");

                    b.ToTable("Testing", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.TimeFrame", b =>
                {
                    b.Property<Guid>("IdTimeFrame")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("EndingTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartingTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTimeFrame");

                    b.ToTable("TimeFrame", (string)null);
                });

            modelBuilder.Entity("server.Data.Entities.Attendance", b =>
                {
                    b.HasOne("server.Data.Entities.ClassTime", "ClassTime")
                        .WithMany("Attendances")
                        .HasForeignKey("IdClassTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Data.Entities.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("IdStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassTime");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("server.Data.Entities.Bill", b =>
                {
                    b.HasOne("server.Data.Entities.Employee", "Employee")
                        .WithMany("Bills")
                        .HasForeignKey("IdEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Data.Entities.Student", "Student")
                        .WithMany("Bills")
                        .HasForeignKey("IdStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("server.Data.Entities.BillInfo", b =>
                {
                    b.HasOne("server.Data.Entities.Bill", "Bill")
                        .WithMany("BillInfos")
                        .HasForeignKey("IdBill")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Data.Entities.Class", "Class")
                        .WithMany("BillInfos")
                        .HasForeignKey("IdClass")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("server.Data.Entities.Class", b =>
                {
                    b.HasOne("server.Data.Entities.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("server.Data.Entities.ClassTime", b =>
                {
                    b.HasOne("server.Data.Entities.Class", "Class")
                        .WithMany("ClassTimes")
                        .HasForeignKey("IdClass")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Data.Entities.TimeFrame", "TimeFrame")
                        .WithMany("ClassTimes")
                        .HasForeignKey("IdTimeFrame")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("TimeFrame");
                });

            modelBuilder.Entity("server.Data.Entities.ColumnCourse", b =>
                {
                    b.HasOne("server.Data.Entities.ColumnTranscript", "ColumnTranscript")
                        .WithMany("ColumnCourses")
                        .HasForeignKey("IdColumn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Data.Entities.Course", "Course")
                        .WithMany("ColumnCourses")
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ColumnTranscript");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("server.Data.Entities.ConfirmCodes", b =>
                {
                    b.HasOne("server.Data.Entities.AppUser", "AppUser")
                        .WithMany("ConfirmCodes")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("server.Data.Entities.Course", b =>
                {
                    b.HasOne("server.Data.Entities.CourseType", "CourseType")
                        .WithMany("Courses")
                        .HasForeignKey("IdCourseType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Data.Entities.Level", "Level")
                        .WithMany("Courses")
                        .HasForeignKey("IdLevel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseType");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("server.Data.Entities.Employee", b =>
                {
                    b.HasOne("server.Data.Entities.AppUser", "User")
                        .WithOne("Employee")
                        .HasForeignKey("server.Data.Entities.Employee", "IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Data.Entities.Exam", b =>
                {
                    b.HasOne("server.Data.Entities.Class", "Class")
                        .WithMany("Exams")
                        .HasForeignKey("IdClass")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Data.Entities.ColumnTranscript", "ColumnTranscript")
                        .WithMany("Exams")
                        .HasForeignKey("IdColumn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Data.Entities.TestType", "TestType")
                        .WithMany("Exams")
                        .HasForeignKey("IdTestType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("ColumnTranscript");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("server.Data.Entities.Learning", b =>
                {
                    b.HasOne("server.Data.Entities.Class", "Class")
                        .WithMany("Learnings")
                        .HasForeignKey("IdClass")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Data.Entities.Student", "Student")
                        .WithMany("Learnings")
                        .HasForeignKey("IdStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("server.Data.Entities.Lecturer", b =>
                {
                    b.HasOne("server.Data.Entities.AppUser", "AppUser")
                        .WithOne("Lecturer")
                        .HasForeignKey("server.Data.Entities.Lecturer", "IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("server.Data.Entities.Noti_Account", b =>
                {
                    b.HasOne("server.Data.Entities.AppUser", "AppUser")
                        .WithMany("NotiAccounts")
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Data.Entities.Notification", "Notification")
                        .WithMany("NotiAccounts")
                        .HasForeignKey("IdNotification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("server.Data.Entities.RefreshTokens", b =>
                {
                    b.HasOne("server.Data.Entities.AppUser", "AppUser")
                        .WithOne("RefreshTokens")
                        .HasForeignKey("server.Data.Entities.RefreshTokens", "IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("server.Data.Entities.Student", b =>
                {
                    b.HasOne("server.Data.Entities.AppUser", "AppUser")
                        .WithOne("Student")
                        .HasForeignKey("server.Data.Entities.Student", "IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("server.Data.Entities.Teaching", b =>
                {
                    b.HasOne("server.Data.Entities.Class", "Class")
                        .WithMany("Teachings")
                        .HasForeignKey("IdClass")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Data.Entities.Lecturer", "Lecturer")
                        .WithMany("Teachings")
                        .HasForeignKey("IdLecturer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("server.Data.Entities.Testing", b =>
                {
                    b.HasOne("server.Data.Entities.Exam", "Exam")
                        .WithMany("Testings")
                        .HasForeignKey("IdExam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Data.Entities.Student", "Student")
                        .WithMany("Testings")
                        .HasForeignKey("IdStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("server.Data.Entities.AppUser", b =>
                {
                    b.Navigation("ConfirmCodes");

                    b.Navigation("Employee")
                        .IsRequired();

                    b.Navigation("Lecturer")
                        .IsRequired();

                    b.Navigation("NotiAccounts");

                    b.Navigation("RefreshTokens")
                        .IsRequired();

                    b.Navigation("Student")
                        .IsRequired();
                });

            modelBuilder.Entity("server.Data.Entities.Bill", b =>
                {
                    b.Navigation("BillInfos");
                });

            modelBuilder.Entity("server.Data.Entities.Class", b =>
                {
                    b.Navigation("BillInfos");

                    b.Navigation("ClassTimes");

                    b.Navigation("Exams");

                    b.Navigation("Learnings");

                    b.Navigation("Teachings");
                });

            modelBuilder.Entity("server.Data.Entities.ClassTime", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("server.Data.Entities.ColumnTranscript", b =>
                {
                    b.Navigation("ColumnCourses");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("server.Data.Entities.Course", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("ColumnCourses");
                });

            modelBuilder.Entity("server.Data.Entities.CourseType", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("server.Data.Entities.Employee", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("server.Data.Entities.Exam", b =>
                {
                    b.Navigation("Testings");
                });

            modelBuilder.Entity("server.Data.Entities.Lecturer", b =>
                {
                    b.Navigation("Teachings");
                });

            modelBuilder.Entity("server.Data.Entities.Level", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("server.Data.Entities.Notification", b =>
                {
                    b.Navigation("NotiAccounts");
                });

            modelBuilder.Entity("server.Data.Entities.Student", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Bills");

                    b.Navigation("Learnings");

                    b.Navigation("Testings");
                });

            modelBuilder.Entity("server.Data.Entities.TestType", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("server.Data.Entities.TimeFrame", b =>
                {
                    b.Navigation("ClassTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
